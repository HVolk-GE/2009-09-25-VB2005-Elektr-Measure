'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:2.0.50727.42
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("MessungenDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MessungenDataSet
    Inherits System.Data.DataSet
    
    Private tableTemplate As TemplateDataTable
    
    Private tableVorlagenFormat As VorlagenFormatDataTable
    
    Private tableDuplTemplateName As DuplTemplateNameDataTable
    
    Private tableDuplTestNumbersAndTimes As DuplTestNumbersAndTimesDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Template")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateDataTable(ds.Tables("Template")))
            End If
            If (Not (ds.Tables("VorlagenFormat")) Is Nothing) Then
                MyBase.Tables.Add(New VorlagenFormatDataTable(ds.Tables("VorlagenFormat")))
            End If
            If (Not (ds.Tables("DuplTemplateName")) Is Nothing) Then
                MyBase.Tables.Add(New DuplTemplateNameDataTable(ds.Tables("DuplTemplateName")))
            End If
            If (Not (ds.Tables("DuplTestNumbersAndTimes")) Is Nothing) Then
                MyBase.Tables.Add(New DuplTestNumbersAndTimesDataTable(ds.Tables("DuplTestNumbersAndTimes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Template() As TemplateDataTable
        Get
            Return Me.tableTemplate
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VorlagenFormat() As VorlagenFormatDataTable
        Get
            Return Me.tableVorlagenFormat
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DuplTemplateName() As DuplTemplateNameDataTable
        Get
            Return Me.tableDuplTemplateName
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DuplTestNumbersAndTimes() As DuplTestNumbersAndTimesDataTable
        Get
            Return Me.tableDuplTestNumbersAndTimes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As MessungenDataSet = CType(MyBase.Clone,MessungenDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Template")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateDataTable(ds.Tables("Template")))
            End If
            If (Not (ds.Tables("VorlagenFormat")) Is Nothing) Then
                MyBase.Tables.Add(New VorlagenFormatDataTable(ds.Tables("VorlagenFormat")))
            End If
            If (Not (ds.Tables("DuplTemplateName")) Is Nothing) Then
                MyBase.Tables.Add(New DuplTemplateNameDataTable(ds.Tables("DuplTemplateName")))
            End If
            If (Not (ds.Tables("DuplTestNumbersAndTimes")) Is Nothing) Then
                MyBase.Tables.Add(New DuplTestNumbersAndTimesDataTable(ds.Tables("DuplTestNumbersAndTimes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTemplate = CType(MyBase.Tables("Template"),TemplateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplate) Is Nothing) Then
                Me.tableTemplate.InitVars
            End If
        End If
        Me.tableVorlagenFormat = CType(MyBase.Tables("VorlagenFormat"),VorlagenFormatDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVorlagenFormat) Is Nothing) Then
                Me.tableVorlagenFormat.InitVars
            End If
        End If
        Me.tableDuplTemplateName = CType(MyBase.Tables("DuplTemplateName"),DuplTemplateNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDuplTemplateName) Is Nothing) Then
                Me.tableDuplTemplateName.InitVars
            End If
        End If
        Me.tableDuplTestNumbersAndTimes = CType(MyBase.Tables("DuplTestNumbersAndTimes"),DuplTestNumbersAndTimesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDuplTestNumbersAndTimes) Is Nothing) Then
                Me.tableDuplTestNumbersAndTimes.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MessungenDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MessungenDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTemplate = New TemplateDataTable
        MyBase.Tables.Add(Me.tableTemplate)
        Me.tableVorlagenFormat = New VorlagenFormatDataTable
        MyBase.Tables.Add(Me.tableVorlagenFormat)
        Me.tableDuplTemplateName = New DuplTemplateNameDataTable
        MyBase.Tables.Add(Me.tableDuplTemplateName)
        Me.tableDuplTestNumbersAndTimes = New DuplTestNumbersAndTimesDataTable
        MyBase.Tables.Add(Me.tableDuplTestNumbersAndTimes)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplate() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVorlagenFormat() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDuplTemplateName() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDuplTestNumbersAndTimes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MessungenDataSet = New MessungenDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub TemplateRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateRowChangeEvent)
    
    Public Delegate Sub VorlagenFormatRowChangeEventHandler(ByVal sender As Object, ByVal e As VorlagenFormatRowChangeEvent)
    
    Public Delegate Sub DuplTemplateNameRowChangeEventHandler(ByVal sender As Object, ByVal e As DuplTemplateNameRowChangeEvent)
    
    Public Delegate Sub DuplTestNumbersAndTimesRowChangeEventHandler(ByVal sender As Object, ByVal e As DuplTestNumbersAndTimesRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTemplateName As System.Data.DataColumn
        
        Private columnTestnumber As System.Data.DataColumn
        
        Private columnMeasuretimepoint As System.Data.DataColumn
        
        Private columnPadDisc As System.Data.DataColumn
        
        Private columnMP1 As System.Data.DataColumn
        
        Private columnMP2 As System.Data.DataColumn
        
        Private columnMP3 As System.Data.DataColumn
        
        Private columnMP4 As System.Data.DataColumn
        
        Private columnMP5 As System.Data.DataColumn
        
        Private columnMP6 As System.Data.DataColumn
        
        Private columnMP7 As System.Data.DataColumn
        
        Private columnMP8 As System.Data.DataColumn
        
        Private columnMP9 As System.Data.DataColumn
        
        Private columnMP10 As System.Data.DataColumn
        
        Private columnMP11 As System.Data.DataColumn
        
        Private columnMP12 As System.Data.DataColumn
        
        Private columnDiscID As System.Data.DataColumn
        
        Private columnRunout1 As System.Data.DataColumn
        
        Private columnRunout2 As System.Data.DataColumn
        
        Private columnPadInOutSide As System.Data.DataColumn
        
        Private columnclockside As System.Data.DataColumn
        
        Private columnWeigh As System.Data.DataColumn
        
        Private columnMeasureID As System.Data.DataColumn
        
        Private columnWeighID As System.Data.DataColumn
        
        Private columnDatetime As System.Data.DataColumn
        
        Private columnfinish As System.Data.DataColumn
        
        Private columnOperator As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Template"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemplateNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemplateName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestnumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnTestnumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MeasuretimepointColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasuretimepoint
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PadDiscColumn() As System.Data.DataColumn
            Get
                Return Me.columnPadDisc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP1Column() As System.Data.DataColumn
            Get
                Return Me.columnMP1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP2Column() As System.Data.DataColumn
            Get
                Return Me.columnMP2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP3Column() As System.Data.DataColumn
            Get
                Return Me.columnMP3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP4Column() As System.Data.DataColumn
            Get
                Return Me.columnMP4
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP5Column() As System.Data.DataColumn
            Get
                Return Me.columnMP5
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP6Column() As System.Data.DataColumn
            Get
                Return Me.columnMP6
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP7Column() As System.Data.DataColumn
            Get
                Return Me.columnMP7
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP8Column() As System.Data.DataColumn
            Get
                Return Me.columnMP8
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP9Column() As System.Data.DataColumn
            Get
                Return Me.columnMP9
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP10Column() As System.Data.DataColumn
            Get
                Return Me.columnMP10
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP11Column() As System.Data.DataColumn
            Get
                Return Me.columnMP11
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MP12Column() As System.Data.DataColumn
            Get
                Return Me.columnMP12
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiscID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Runout1Column() As System.Data.DataColumn
            Get
                Return Me.columnRunout1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Runout2Column() As System.Data.DataColumn
            Get
                Return Me.columnRunout2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PadInOutSideColumn() As System.Data.DataColumn
            Get
                Return Me.columnPadInOutSide
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clocksideColumn() As System.Data.DataColumn
            Get
                Return Me.columnclockside
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeighColumn() As System.Data.DataColumn
            Get
                Return Me.columnWeigh
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MeasureIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasureID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeighIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnWeighID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DatetimeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDatetime
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property finishColumn() As System.Data.DataColumn
            Get
                Return Me.columnfinish
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperatorColumn() As System.Data.DataColumn
            Get
                Return Me.columnOperator
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateRow
            Get
                Return CType(Me.Rows(index),TemplateRow)
            End Get
        End Property
        
        Public Event TemplateRowChanging As TemplateRowChangeEventHandler
        
        Public Event TemplateRowChanged As TemplateRowChangeEventHandler
        
        Public Event TemplateRowDeleting As TemplateRowChangeEventHandler
        
        Public Event TemplateRowDeleted As TemplateRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateRow(ByVal row As TemplateRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateRow( _
                    ByVal TemplateName As String,  _
                    ByVal Testnumber As String,  _
                    ByVal Measuretimepoint As String,  _
                    ByVal PadDisc As String,  _
                    ByVal MP1 As Double,  _
                    ByVal MP2 As Double,  _
                    ByVal MP3 As Double,  _
                    ByVal MP4 As Double,  _
                    ByVal MP5 As Double,  _
                    ByVal MP6 As Double,  _
                    ByVal MP7 As Double,  _
                    ByVal MP8 As Double,  _
                    ByVal MP9 As Double,  _
                    ByVal MP10 As Double,  _
                    ByVal MP11 As Double,  _
                    ByVal MP12 As Double,  _
                    ByVal DiscID As String,  _
                    ByVal Runout1 As String,  _
                    ByVal Runout2 As String,  _
                    ByVal PadInOutSide As String,  _
                    ByVal clockside As String,  _
                    ByVal Weigh As Double,  _
                    ByVal MeasureID As Integer,  _
                    ByVal WeighID As Integer,  _
                    ByVal Datetime As String,  _
                    ByVal finish As String,  _
                    ByVal _Operator As String) As TemplateRow
            Dim rowTemplateRow As TemplateRow = CType(Me.NewRow,TemplateRow)
            rowTemplateRow.ItemArray = New Object() {TemplateName, Testnumber, Measuretimepoint, PadDisc, MP1, MP2, MP3, MP4, MP5, MP6, MP7, MP8, MP9, MP10, MP11, MP12, DiscID, Runout1, Runout2, PadInOutSide, clockside, Weigh, MeasureID, WeighID, Datetime, finish, _Operator}
            Me.Rows.Add(rowTemplateRow)
            Return rowTemplateRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TemplateDataTable = CType(MyBase.Clone,TemplateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TemplateDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTemplateName = MyBase.Columns("TemplateName")
            Me.columnTestnumber = MyBase.Columns("Testnumber")
            Me.columnMeasuretimepoint = MyBase.Columns("Measuretimepoint")
            Me.columnPadDisc = MyBase.Columns("PadDisc")
            Me.columnMP1 = MyBase.Columns("MP1")
            Me.columnMP2 = MyBase.Columns("MP2")
            Me.columnMP3 = MyBase.Columns("MP3")
            Me.columnMP4 = MyBase.Columns("MP4")
            Me.columnMP5 = MyBase.Columns("MP5")
            Me.columnMP6 = MyBase.Columns("MP6")
            Me.columnMP7 = MyBase.Columns("MP7")
            Me.columnMP8 = MyBase.Columns("MP8")
            Me.columnMP9 = MyBase.Columns("MP9")
            Me.columnMP10 = MyBase.Columns("MP10")
            Me.columnMP11 = MyBase.Columns("MP11")
            Me.columnMP12 = MyBase.Columns("MP12")
            Me.columnDiscID = MyBase.Columns("DiscID")
            Me.columnRunout1 = MyBase.Columns("Runout1")
            Me.columnRunout2 = MyBase.Columns("Runout2")
            Me.columnPadInOutSide = MyBase.Columns("PadInOutSide")
            Me.columnclockside = MyBase.Columns("clockside")
            Me.columnWeigh = MyBase.Columns("Weigh")
            Me.columnMeasureID = MyBase.Columns("MeasureID")
            Me.columnWeighID = MyBase.Columns("WeighID")
            Me.columnDatetime = MyBase.Columns("Datetime")
            Me.columnfinish = MyBase.Columns("finish")
            Me.columnOperator = MyBase.Columns("Operator")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTemplateName = New System.Data.DataColumn("TemplateName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemplateName)
            Me.columnTestnumber = New System.Data.DataColumn("Testnumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestnumber)
            Me.columnMeasuretimepoint = New System.Data.DataColumn("Measuretimepoint", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasuretimepoint)
            Me.columnPadDisc = New System.Data.DataColumn("PadDisc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPadDisc)
            Me.columnMP1 = New System.Data.DataColumn("MP1", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP1)
            Me.columnMP2 = New System.Data.DataColumn("MP2", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP2)
            Me.columnMP3 = New System.Data.DataColumn("MP3", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP3)
            Me.columnMP4 = New System.Data.DataColumn("MP4", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP4)
            Me.columnMP5 = New System.Data.DataColumn("MP5", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP5)
            Me.columnMP6 = New System.Data.DataColumn("MP6", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP6)
            Me.columnMP7 = New System.Data.DataColumn("MP7", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP7)
            Me.columnMP8 = New System.Data.DataColumn("MP8", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP8)
            Me.columnMP9 = New System.Data.DataColumn("MP9", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP9)
            Me.columnMP10 = New System.Data.DataColumn("MP10", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP10)
            Me.columnMP11 = New System.Data.DataColumn("MP11", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP11)
            Me.columnMP12 = New System.Data.DataColumn("MP12", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP12)
            Me.columnDiscID = New System.Data.DataColumn("DiscID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscID)
            Me.columnRunout1 = New System.Data.DataColumn("Runout1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunout1)
            Me.columnRunout2 = New System.Data.DataColumn("Runout2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunout2)
            Me.columnPadInOutSide = New System.Data.DataColumn("PadInOutSide", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPadInOutSide)
            Me.columnclockside = New System.Data.DataColumn("clockside", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclockside)
            Me.columnWeigh = New System.Data.DataColumn("Weigh", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeigh)
            Me.columnMeasureID = New System.Data.DataColumn("MeasureID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasureID)
            Me.columnWeighID = New System.Data.DataColumn("WeighID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeighID)
            Me.columnDatetime = New System.Data.DataColumn("Datetime", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatetime)
            Me.columnfinish = New System.Data.DataColumn("finish", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfinish)
            Me.columnOperator = New System.Data.DataColumn("Operator", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Operator")
            Me.columnOperator.ExtendedProperties.Add("Generator_UserColumnName", "Operator")
            MyBase.Columns.Add(Me.columnOperator)
            Me.columnTemplateName.MaxLength = 50
            Me.columnTestnumber.MaxLength = 50
            Me.columnMeasuretimepoint.MaxLength = 50
            Me.columnPadDisc.MaxLength = 50
            Me.columnDiscID.MaxLength = 50
            Me.columnRunout1.MaxLength = 50
            Me.columnRunout2.MaxLength = 50
            Me.columnPadInOutSide.MaxLength = 50
            Me.columnclockside.MaxLength = 50
            Me.columnDatetime.MaxLength = 50
            Me.columnfinish.MaxLength = 50
            Me.columnOperator.MaxLength = 3
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateRow() As TemplateRow
            Return CType(Me.NewRow,TemplateRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TemplateRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TemplateRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateRowChanged(Me, New TemplateRowChangeEvent(CType(e.Row,TemplateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateRowChanging(Me, New TemplateRowChangeEvent(CType(e.Row,TemplateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateRowDeleted(Me, New TemplateRowChangeEvent(CType(e.Row,TemplateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateRowDeleting(Me, New TemplateRowChangeEvent(CType(e.Row,TemplateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateRow(ByVal row As TemplateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As MessungenDataSet = New MessungenDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VorlagenFormatDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTemplatename As System.Data.DataColumn
        
        Private columnMeasurement_Pads_Points As System.Data.DataColumn
        
        Private columnMeasurement_Disc_Points As System.Data.DataColumn
        
        Private columnMeasurement_Pads_Times As System.Data.DataColumn
        
        Private columnMeasurement_Disc_Times As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VorlagenFormat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemplatenameColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemplatename
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Measurement_Pads_PointsColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasurement_Pads_Points
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Measurement_Disc_PointsColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasurement_Disc_Points
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Measurement_Pads_TimesColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasurement_Pads_Times
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Measurement_Disc_TimesColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasurement_Disc_Times
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VorlagenFormatRow
            Get
                Return CType(Me.Rows(index),VorlagenFormatRow)
            End Get
        End Property
        
        Public Event VorlagenFormatRowChanging As VorlagenFormatRowChangeEventHandler
        
        Public Event VorlagenFormatRowChanged As VorlagenFormatRowChangeEventHandler
        
        Public Event VorlagenFormatRowDeleting As VorlagenFormatRowChangeEventHandler
        
        Public Event VorlagenFormatRowDeleted As VorlagenFormatRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVorlagenFormatRow(ByVal row As VorlagenFormatRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVorlagenFormatRow(ByVal Templatename As String, ByVal Measurement_Pads_Points As Integer, ByVal Measurement_Disc_Points As Integer, ByVal Measurement_Pads_Times As Integer, ByVal Measurement_Disc_Times As Integer) As VorlagenFormatRow
            Dim rowVorlagenFormatRow As VorlagenFormatRow = CType(Me.NewRow,VorlagenFormatRow)
            rowVorlagenFormatRow.ItemArray = New Object() {Templatename, Measurement_Pads_Points, Measurement_Disc_Points, Measurement_Pads_Times, Measurement_Disc_Times}
            Me.Rows.Add(rowVorlagenFormatRow)
            Return rowVorlagenFormatRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTemplatename(ByVal Templatename As String) As VorlagenFormatRow
            Return CType(Me.Rows.Find(New Object() {Templatename}),VorlagenFormatRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VorlagenFormatDataTable = CType(MyBase.Clone,VorlagenFormatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VorlagenFormatDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTemplatename = MyBase.Columns("Templatename")
            Me.columnMeasurement_Pads_Points = MyBase.Columns("Measurement Pads Points")
            Me.columnMeasurement_Disc_Points = MyBase.Columns("Measurement Disc Points")
            Me.columnMeasurement_Pads_Times = MyBase.Columns("Measurement Pads Times")
            Me.columnMeasurement_Disc_Times = MyBase.Columns("Measurement Disc Times")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTemplatename = New System.Data.DataColumn("Templatename", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemplatename)
            Me.columnMeasurement_Pads_Points = New System.Data.DataColumn("Measurement Pads Points", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnMeasurement_Pads_Points.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Measurement_Pads_Points")
            Me.columnMeasurement_Pads_Points.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Measurement_Pads_PointsColumn")
            Me.columnMeasurement_Pads_Points.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnMeasurement_Pads_Points")
            Me.columnMeasurement_Pads_Points.ExtendedProperties.Add("Generator_UserColumnName", "Measurement Pads Points")
            MyBase.Columns.Add(Me.columnMeasurement_Pads_Points)
            Me.columnMeasurement_Disc_Points = New System.Data.DataColumn("Measurement Disc Points", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnMeasurement_Disc_Points.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Measurement_Disc_Points")
            Me.columnMeasurement_Disc_Points.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Measurement_Disc_PointsColumn")
            Me.columnMeasurement_Disc_Points.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnMeasurement_Disc_Points")
            Me.columnMeasurement_Disc_Points.ExtendedProperties.Add("Generator_UserColumnName", "Measurement Disc Points")
            MyBase.Columns.Add(Me.columnMeasurement_Disc_Points)
            Me.columnMeasurement_Pads_Times = New System.Data.DataColumn("Measurement Pads Times", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnMeasurement_Pads_Times.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Measurement_Pads_Times")
            Me.columnMeasurement_Pads_Times.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Measurement_Pads_TimesColumn")
            Me.columnMeasurement_Pads_Times.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnMeasurement_Pads_Times")
            Me.columnMeasurement_Pads_Times.ExtendedProperties.Add("Generator_UserColumnName", "Measurement Pads Times")
            MyBase.Columns.Add(Me.columnMeasurement_Pads_Times)
            Me.columnMeasurement_Disc_Times = New System.Data.DataColumn("Measurement Disc Times", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnMeasurement_Disc_Times.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Measurement_Disc_Times")
            Me.columnMeasurement_Disc_Times.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Measurement_Disc_TimesColumn")
            Me.columnMeasurement_Disc_Times.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnMeasurement_Disc_Times")
            Me.columnMeasurement_Disc_Times.ExtendedProperties.Add("Generator_UserColumnName", "Measurement Disc Times")
            MyBase.Columns.Add(Me.columnMeasurement_Disc_Times)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTemplatename}, true))
            Me.columnTemplatename.AllowDBNull = false
            Me.columnTemplatename.Unique = true
            Me.columnTemplatename.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVorlagenFormatRow() As VorlagenFormatRow
            Return CType(Me.NewRow,VorlagenFormatRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VorlagenFormatRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VorlagenFormatRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VorlagenFormatRowChangedEvent) Is Nothing) Then
                RaiseEvent VorlagenFormatRowChanged(Me, New VorlagenFormatRowChangeEvent(CType(e.Row,VorlagenFormatRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VorlagenFormatRowChangingEvent) Is Nothing) Then
                RaiseEvent VorlagenFormatRowChanging(Me, New VorlagenFormatRowChangeEvent(CType(e.Row,VorlagenFormatRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VorlagenFormatRowDeletedEvent) Is Nothing) Then
                RaiseEvent VorlagenFormatRowDeleted(Me, New VorlagenFormatRowChangeEvent(CType(e.Row,VorlagenFormatRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VorlagenFormatRowDeletingEvent) Is Nothing) Then
                RaiseEvent VorlagenFormatRowDeleting(Me, New VorlagenFormatRowChangeEvent(CType(e.Row,VorlagenFormatRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVorlagenFormatRow(ByVal row As VorlagenFormatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As MessungenDataSet = New MessungenDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VorlagenFormatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DuplTemplateNameDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTestnumber_Feld As System.Data.DataColumn
        
        Private columnAnzahlVonDuplikaten As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DuplTemplateName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Testnumber_FeldColumn() As System.Data.DataColumn
            Get
                Return Me.columnTestnumber_Feld
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnzahlVonDuplikatenColumn() As System.Data.DataColumn
            Get
                Return Me.columnAnzahlVonDuplikaten
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DuplTemplateNameRow
            Get
                Return CType(Me.Rows(index),DuplTemplateNameRow)
            End Get
        End Property
        
        Public Event DuplTemplateNameRowChanging As DuplTemplateNameRowChangeEventHandler
        
        Public Event DuplTemplateNameRowChanged As DuplTemplateNameRowChangeEventHandler
        
        Public Event DuplTemplateNameRowDeleting As DuplTemplateNameRowChangeEventHandler
        
        Public Event DuplTemplateNameRowDeleted As DuplTemplateNameRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDuplTemplateNameRow(ByVal row As DuplTemplateNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDuplTemplateNameRow(ByVal Testnumber_Feld As String, ByVal AnzahlVonDuplikaten As Integer) As DuplTemplateNameRow
            Dim rowDuplTemplateNameRow As DuplTemplateNameRow = CType(Me.NewRow,DuplTemplateNameRow)
            rowDuplTemplateNameRow.ItemArray = New Object() {Testnumber_Feld, AnzahlVonDuplikaten}
            Me.Rows.Add(rowDuplTemplateNameRow)
            Return rowDuplTemplateNameRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DuplTemplateNameDataTable = CType(MyBase.Clone,DuplTemplateNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DuplTemplateNameDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTestnumber_Feld = MyBase.Columns("Testnumber Feld")
            Me.columnAnzahlVonDuplikaten = MyBase.Columns("AnzahlVonDuplikaten")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTestnumber_Feld = New System.Data.DataColumn("Testnumber Feld", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnTestnumber_Feld.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Testnumber_Feld")
            Me.columnTestnumber_Feld.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Testnumber_FeldColumn")
            Me.columnTestnumber_Feld.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTestnumber_Feld")
            Me.columnTestnumber_Feld.ExtendedProperties.Add("Generator_UserColumnName", "Testnumber Feld")
            MyBase.Columns.Add(Me.columnTestnumber_Feld)
            Me.columnAnzahlVonDuplikaten = New System.Data.DataColumn("AnzahlVonDuplikaten", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnzahlVonDuplikaten)
            Me.columnTestnumber_Feld.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDuplTemplateNameRow() As DuplTemplateNameRow
            Return CType(Me.NewRow,DuplTemplateNameRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DuplTemplateNameRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DuplTemplateNameRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DuplTemplateNameRowChangedEvent) Is Nothing) Then
                RaiseEvent DuplTemplateNameRowChanged(Me, New DuplTemplateNameRowChangeEvent(CType(e.Row,DuplTemplateNameRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DuplTemplateNameRowChangingEvent) Is Nothing) Then
                RaiseEvent DuplTemplateNameRowChanging(Me, New DuplTemplateNameRowChangeEvent(CType(e.Row,DuplTemplateNameRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DuplTemplateNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent DuplTemplateNameRowDeleted(Me, New DuplTemplateNameRowChangeEvent(CType(e.Row,DuplTemplateNameRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DuplTemplateNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent DuplTemplateNameRowDeleting(Me, New DuplTemplateNameRowChangeEvent(CType(e.Row,DuplTemplateNameRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDuplTemplateNameRow(ByVal row As DuplTemplateNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As MessungenDataSet = New MessungenDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DuplTemplateNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DuplTestNumbersAndTimesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTestnumberFeld As System.Data.DataColumn
        
        Private columnAnzahlVonDuplikaten As System.Data.DataColumn
        
        Private columnMeasuretimepoint As System.Data.DataColumn
        
        Private columnPadInOutSide As System.Data.DataColumn
        
        Private columnTemplateName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DuplTestNumbersAndTimes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestnumberFeldColumn() As System.Data.DataColumn
            Get
                Return Me.columnTestnumberFeld
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnzahlVonDuplikatenColumn() As System.Data.DataColumn
            Get
                Return Me.columnAnzahlVonDuplikaten
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MeasuretimepointColumn() As System.Data.DataColumn
            Get
                Return Me.columnMeasuretimepoint
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PadInOutSideColumn() As System.Data.DataColumn
            Get
                Return Me.columnPadInOutSide
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemplateNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemplateName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DuplTestNumbersAndTimesRow
            Get
                Return CType(Me.Rows(index),DuplTestNumbersAndTimesRow)
            End Get
        End Property
        
        Public Event DuplTestNumbersAndTimesRowChanging As DuplTestNumbersAndTimesRowChangeEventHandler
        
        Public Event DuplTestNumbersAndTimesRowChanged As DuplTestNumbersAndTimesRowChangeEventHandler
        
        Public Event DuplTestNumbersAndTimesRowDeleting As DuplTestNumbersAndTimesRowChangeEventHandler
        
        Public Event DuplTestNumbersAndTimesRowDeleted As DuplTestNumbersAndTimesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDuplTestNumbersAndTimesRow(ByVal row As DuplTestNumbersAndTimesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDuplTestNumbersAndTimesRow(ByVal TestnumberFeld As String, ByVal AnzahlVonDuplikaten As Integer, ByVal Measuretimepoint As String, ByVal PadInOutSide As String, ByVal TemplateName As String) As DuplTestNumbersAndTimesRow
            Dim rowDuplTestNumbersAndTimesRow As DuplTestNumbersAndTimesRow = CType(Me.NewRow,DuplTestNumbersAndTimesRow)
            rowDuplTestNumbersAndTimesRow.ItemArray = New Object() {TestnumberFeld, AnzahlVonDuplikaten, Measuretimepoint, PadInOutSide, TemplateName}
            Me.Rows.Add(rowDuplTestNumbersAndTimesRow)
            Return rowDuplTestNumbersAndTimesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DuplTestNumbersAndTimesDataTable = CType(MyBase.Clone,DuplTestNumbersAndTimesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DuplTestNumbersAndTimesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTestnumberFeld = MyBase.Columns("TestnumberFeld")
            Me.columnAnzahlVonDuplikaten = MyBase.Columns("AnzahlVonDuplikaten")
            Me.columnMeasuretimepoint = MyBase.Columns("Measuretimepoint")
            Me.columnPadInOutSide = MyBase.Columns("PadInOutSide")
            Me.columnTemplateName = MyBase.Columns("TemplateName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTestnumberFeld = New System.Data.DataColumn("TestnumberFeld", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestnumberFeld)
            Me.columnAnzahlVonDuplikaten = New System.Data.DataColumn("AnzahlVonDuplikaten", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnzahlVonDuplikaten)
            Me.columnMeasuretimepoint = New System.Data.DataColumn("Measuretimepoint", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasuretimepoint)
            Me.columnPadInOutSide = New System.Data.DataColumn("PadInOutSide", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPadInOutSide)
            Me.columnTemplateName = New System.Data.DataColumn("TemplateName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemplateName)
            Me.columnTestnumberFeld.MaxLength = 255
            Me.columnMeasuretimepoint.MaxLength = 50
            Me.columnPadInOutSide.MaxLength = 50
            Me.columnTemplateName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDuplTestNumbersAndTimesRow() As DuplTestNumbersAndTimesRow
            Return CType(Me.NewRow,DuplTestNumbersAndTimesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DuplTestNumbersAndTimesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DuplTestNumbersAndTimesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DuplTestNumbersAndTimesRowChangedEvent) Is Nothing) Then
                RaiseEvent DuplTestNumbersAndTimesRowChanged(Me, New DuplTestNumbersAndTimesRowChangeEvent(CType(e.Row,DuplTestNumbersAndTimesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DuplTestNumbersAndTimesRowChangingEvent) Is Nothing) Then
                RaiseEvent DuplTestNumbersAndTimesRowChanging(Me, New DuplTestNumbersAndTimesRowChangeEvent(CType(e.Row,DuplTestNumbersAndTimesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DuplTestNumbersAndTimesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DuplTestNumbersAndTimesRowDeleted(Me, New DuplTestNumbersAndTimesRowChangeEvent(CType(e.Row,DuplTestNumbersAndTimesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DuplTestNumbersAndTimesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DuplTestNumbersAndTimesRowDeleting(Me, New DuplTestNumbersAndTimesRowChangeEvent(CType(e.Row,DuplTestNumbersAndTimesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDuplTestNumbersAndTimesRow(ByVal row As DuplTestNumbersAndTimesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As MessungenDataSet = New MessungenDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DuplTestNumbersAndTimesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateRow
        Inherits System.Data.DataRow
        
        Private tableTemplate As TemplateDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplate = CType(Me.Table,TemplateDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemplateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.TemplateNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte TemplateName in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.TemplateNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Testnumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.TestnumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Testnumber in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.TestnumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measuretimepoint() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MeasuretimepointColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measuretimepoint in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MeasuretimepointColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PadDisc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.PadDiscColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte PadDisc in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.PadDiscColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP1Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP1 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP2Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP2 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP3Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP3 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP4Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP4 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP4Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP5Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP5 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP5Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP6Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP6 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP6Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP7Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP7 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP7Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP8Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP8 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP8Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP9Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP9 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP9Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP10Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP10 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP10Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP11Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP11 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP11Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MP12Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MP12 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MP12Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.DiscIDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte DiscID in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.DiscIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Runout1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.Runout1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Runout1 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.Runout1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Runout2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.Runout2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Runout2 in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.Runout2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PadInOutSide() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.PadInOutSideColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte PadInOutSide in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.PadInOutSideColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clockside() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.clocksideColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte clockside in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.clocksideColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weigh() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.WeighColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Weigh in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.WeighColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MeasureID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.MeasureIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte MeasureID in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.MeasureIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WeighID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.WeighIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte WeighID in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.WeighIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Datetime() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.DatetimeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Datetime in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.DatetimeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property finish() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.finishColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte finish in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.finishColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Operator() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplate.OperatorColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Operator in Tabelle Template ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplate.OperatorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemplateNameNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.TemplateNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemplateNameNull()
            Me(Me.tableTemplate.TemplateNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestnumberNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.TestnumberColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestnumberNull()
            Me(Me.tableTemplate.TestnumberColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasuretimepointNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.MeasuretimepointColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasuretimepointNull()
            Me(Me.tableTemplate.MeasuretimepointColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPadDiscNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.PadDiscColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPadDiscNull()
            Me(Me.tableTemplate.PadDiscColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP1Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP1Null()
            Me(Me.tableTemplate.MP1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP2Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP2Null()
            Me(Me.tableTemplate.MP2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP3Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP3Null()
            Me(Me.tableTemplate.MP3Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP4Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP4Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP4Null()
            Me(Me.tableTemplate.MP4Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP5Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP5Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP5Null()
            Me(Me.tableTemplate.MP5Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP6Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP6Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP6Null()
            Me(Me.tableTemplate.MP6Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP7Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP7Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP7Null()
            Me(Me.tableTemplate.MP7Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP8Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP8Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP8Null()
            Me(Me.tableTemplate.MP8Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP9Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP9Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP9Null()
            Me(Me.tableTemplate.MP9Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP10Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP10Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP10Null()
            Me(Me.tableTemplate.MP10Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP11Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP11Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP11Null()
            Me(Me.tableTemplate.MP11Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMP12Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.MP12Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMP12Null()
            Me(Me.tableTemplate.MP12Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscIDNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.DiscIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscIDNull()
            Me(Me.tableTemplate.DiscIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunout1Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.Runout1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunout1Null()
            Me(Me.tableTemplate.Runout1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunout2Null() As Boolean
            Return Me.IsNull(Me.tableTemplate.Runout2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunout2Null()
            Me(Me.tableTemplate.Runout2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPadInOutSideNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.PadInOutSideColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPadInOutSideNull()
            Me(Me.tableTemplate.PadInOutSideColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclocksideNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.clocksideColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclocksideNull()
            Me(Me.tableTemplate.clocksideColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeighNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.WeighColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeighNull()
            Me(Me.tableTemplate.WeighColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasureIDNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.MeasureIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasureIDNull()
            Me(Me.tableTemplate.MeasureIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeighIDNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.WeighIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeighIDNull()
            Me(Me.tableTemplate.WeighIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDatetimeNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.DatetimeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDatetimeNull()
            Me(Me.tableTemplate.DatetimeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfinishNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.finishColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfinishNull()
            Me(Me.tableTemplate.finishColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_OperatorNull() As Boolean
            Return Me.IsNull(Me.tableTemplate.OperatorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_OperatorNull()
            Me(Me.tableTemplate.OperatorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VorlagenFormatRow
        Inherits System.Data.DataRow
        
        Private tableVorlagenFormat As VorlagenFormatDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVorlagenFormat = CType(Me.Table,VorlagenFormatDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Templatename() As String
            Get
                Return CType(Me(Me.tableVorlagenFormat.TemplatenameColumn),String)
            End Get
            Set
                Me(Me.tableVorlagenFormat.TemplatenameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measurement_Pads_Points() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVorlagenFormat.Measurement_Pads_PointsColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measurement Pads Points in Tabelle VorlagenFormat ist DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVorlagenFormat.Measurement_Pads_PointsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measurement_Disc_Points() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVorlagenFormat.Measurement_Disc_PointsColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measurement Disc Points in Tabelle VorlagenFormat ist DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVorlagenFormat.Measurement_Disc_PointsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measurement_Pads_Times() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVorlagenFormat.Measurement_Pads_TimesColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measurement Pads Times in Tabelle VorlagenFormat ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVorlagenFormat.Measurement_Pads_TimesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measurement_Disc_Times() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVorlagenFormat.Measurement_Disc_TimesColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measurement Disc Times in Tabelle VorlagenFormat ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVorlagenFormat.Measurement_Disc_TimesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasurement_Pads_PointsNull() As Boolean
            Return Me.IsNull(Me.tableVorlagenFormat.Measurement_Pads_PointsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasurement_Pads_PointsNull()
            Me(Me.tableVorlagenFormat.Measurement_Pads_PointsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasurement_Disc_PointsNull() As Boolean
            Return Me.IsNull(Me.tableVorlagenFormat.Measurement_Disc_PointsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasurement_Disc_PointsNull()
            Me(Me.tableVorlagenFormat.Measurement_Disc_PointsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasurement_Pads_TimesNull() As Boolean
            Return Me.IsNull(Me.tableVorlagenFormat.Measurement_Pads_TimesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasurement_Pads_TimesNull()
            Me(Me.tableVorlagenFormat.Measurement_Pads_TimesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasurement_Disc_TimesNull() As Boolean
            Return Me.IsNull(Me.tableVorlagenFormat.Measurement_Disc_TimesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasurement_Disc_TimesNull()
            Me(Me.tableVorlagenFormat.Measurement_Disc_TimesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DuplTemplateNameRow
        Inherits System.Data.DataRow
        
        Private tableDuplTemplateName As DuplTemplateNameDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDuplTemplateName = CType(Me.Table,DuplTemplateNameDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Testnumber_Feld() As String
            Get
                Try 
                    Return CType(Me(Me.tableDuplTemplateName.Testnumber_FeldColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Testnumber Feld in Tabelle DuplTemplateName ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTemplateName.Testnumber_FeldColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnzahlVonDuplikaten() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDuplTemplateName.AnzahlVonDuplikatenColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte AnzahlVonDuplikaten in Tabelle DuplTemplateName ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTemplateName.AnzahlVonDuplikatenColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestnumber_FeldNull() As Boolean
            Return Me.IsNull(Me.tableDuplTemplateName.Testnumber_FeldColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestnumber_FeldNull()
            Me(Me.tableDuplTemplateName.Testnumber_FeldColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnzahlVonDuplikatenNull() As Boolean
            Return Me.IsNull(Me.tableDuplTemplateName.AnzahlVonDuplikatenColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnzahlVonDuplikatenNull()
            Me(Me.tableDuplTemplateName.AnzahlVonDuplikatenColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DuplTestNumbersAndTimesRow
        Inherits System.Data.DataRow
        
        Private tableDuplTestNumbersAndTimes As DuplTestNumbersAndTimesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDuplTestNumbersAndTimes = CType(Me.Table,DuplTestNumbersAndTimesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestnumberFeld() As String
            Get
                Try 
                    Return CType(Me(Me.tableDuplTestNumbersAndTimes.TestnumberFeldColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte TestnumberFeld in Tabelle DuplTestNumbersAndTimes ist DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTestNumbersAndTimes.TestnumberFeldColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnzahlVonDuplikaten() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDuplTestNumbersAndTimes.AnzahlVonDuplikatenColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte AnzahlVonDuplikaten in Tabelle DuplTestNumbersAndTimes ist DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTestNumbersAndTimes.AnzahlVonDuplikatenColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Measuretimepoint() As String
            Get
                Try 
                    Return CType(Me(Me.tableDuplTestNumbersAndTimes.MeasuretimepointColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Measuretimepoint in Tabelle DuplTestNumbersAndTimes ist DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTestNumbersAndTimes.MeasuretimepointColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PadInOutSide() As String
            Get
                Try 
                    Return CType(Me(Me.tableDuplTestNumbersAndTimes.PadInOutSideColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte PadInOutSide in Tabelle DuplTestNumbersAndTimes ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTestNumbersAndTimes.PadInOutSideColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemplateName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDuplTestNumbersAndTimes.TemplateNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte TemplateName in Tabelle DuplTestNumbersAndTimes ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuplTestNumbersAndTimes.TemplateNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestnumberFeldNull() As Boolean
            Return Me.IsNull(Me.tableDuplTestNumbersAndTimes.TestnumberFeldColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestnumberFeldNull()
            Me(Me.tableDuplTestNumbersAndTimes.TestnumberFeldColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnzahlVonDuplikatenNull() As Boolean
            Return Me.IsNull(Me.tableDuplTestNumbersAndTimes.AnzahlVonDuplikatenColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnzahlVonDuplikatenNull()
            Me(Me.tableDuplTestNumbersAndTimes.AnzahlVonDuplikatenColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMeasuretimepointNull() As Boolean
            Return Me.IsNull(Me.tableDuplTestNumbersAndTimes.MeasuretimepointColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMeasuretimepointNull()
            Me(Me.tableDuplTestNumbersAndTimes.MeasuretimepointColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPadInOutSideNull() As Boolean
            Return Me.IsNull(Me.tableDuplTestNumbersAndTimes.PadInOutSideColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPadInOutSideNull()
            Me(Me.tableDuplTestNumbersAndTimes.PadInOutSideColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemplateNameNull() As Boolean
            Return Me.IsNull(Me.tableDuplTestNumbersAndTimes.TemplateNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemplateNameNull()
            Me(Me.tableDuplTestNumbersAndTimes.TemplateNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TemplateRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VorlagenFormatRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VorlagenFormatRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VorlagenFormatRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VorlagenFormatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DuplTemplateNameRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DuplTemplateNameRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DuplTemplateNameRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DuplTemplateNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DuplTestNumbersAndTimesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DuplTestNumbersAndTimesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DuplTestNumbersAndTimesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DuplTestNumbersAndTimesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MessungenDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TemplateTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Template"
            tableMapping.ColumnMappings.Add("TemplateName", "TemplateName")
            tableMapping.ColumnMappings.Add("Testnumber", "Testnumber")
            tableMapping.ColumnMappings.Add("Measuretimepoint", "Measuretimepoint")
            tableMapping.ColumnMappings.Add("PadDisc", "PadDisc")
            tableMapping.ColumnMappings.Add("MP1", "MP1")
            tableMapping.ColumnMappings.Add("MP2", "MP2")
            tableMapping.ColumnMappings.Add("MP3", "MP3")
            tableMapping.ColumnMappings.Add("MP4", "MP4")
            tableMapping.ColumnMappings.Add("MP5", "MP5")
            tableMapping.ColumnMappings.Add("MP6", "MP6")
            tableMapping.ColumnMappings.Add("MP7", "MP7")
            tableMapping.ColumnMappings.Add("MP8", "MP8")
            tableMapping.ColumnMappings.Add("MP9", "MP9")
            tableMapping.ColumnMappings.Add("MP10", "MP10")
            tableMapping.ColumnMappings.Add("MP11", "MP11")
            tableMapping.ColumnMappings.Add("MP12", "MP12")
            tableMapping.ColumnMappings.Add("DiscID", "DiscID")
            tableMapping.ColumnMappings.Add("Runout1", "Runout1")
            tableMapping.ColumnMappings.Add("Runout2", "Runout2")
            tableMapping.ColumnMappings.Add("PadInOutSide", "PadInOutSide")
            tableMapping.ColumnMappings.Add("clockside", "clockside")
            tableMapping.ColumnMappings.Add("Weigh", "Weigh")
            tableMapping.ColumnMappings.Add("MeasureID", "MeasureID")
            tableMapping.ColumnMappings.Add("WeighID", "WeighID")
            tableMapping.ColumnMappings.Add("Datetime", "Datetime")
            tableMapping.ColumnMappings.Add("finish", "finish")
            tableMapping.ColumnMappings.Add("Operator", "Operator")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Template` (`TemplateName`, `Testnumber`, `Measuretimepoint`, `PadDis"& _ 
                "c`, `MP1`, `MP2`, `MP3`, `MP4`, `MP5`, `MP6`, `MP7`, `MP8`, `MP9`, `MP10`, `MP11"& _ 
                "`, `MP12`, `DiscID`, `Runout1`, `Runout2`, `PadInOutSide`, `clockside`, `Weigh`,"& _ 
                " `MeasureID`, `WeighID`, `Datetime`, `finish`, `Operator`) VALUES (?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TemplateName", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TemplateName", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Testnumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Testnumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measuretimepoint", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measuretimepoint", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PadDisc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PadDisc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP1", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP1", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP2", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP2", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP3", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP3", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP4", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP4", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP5", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP5", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP6", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP6", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP7", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP7", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP8", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP8", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP9", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP9", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP10", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP10", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP11", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP11", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MP12", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MP12", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DiscID", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiscID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Runout1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Runout1", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Runout2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Runout2", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PadInOutSide", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PadInOutSide", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("clockside", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "clockside", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Weigh", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Weigh", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MeasureID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MeasureID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("WeighID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WeighID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Datetime", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Datetime", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("finish", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "finish", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Operator", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Operator", System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.MeasureAndWeigh.My.MySettings.Default.MessungenConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TemplateName, Testnumber, Measuretimepoint, PadDisc, MP1, MP2, MP3, MP4, M"& _ 
                "P5, MP6, MP7, MP8, MP9, MP10, MP11, MP12, DiscID, Runout1, Runout2, PadInOutSide"& _ 
                ", clockside, Weigh, MeasureID, WeighID, [Datetime], finish, Operator FROM Templa"& _ 
                "te"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MessungenDataSet.TemplateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MessungenDataSet.TemplateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MessungenDataSet.TemplateDataTable = New MessungenDataSet.TemplateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MessungenDataSet.TemplateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MessungenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Template")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal TemplateName As String,  _
                    ByVal Testnumber As String,  _
                    ByVal Measuretimepoint As String,  _
                    ByVal PadDisc As String,  _
                    ByVal MP1 As System.Nullable(Of Double),  _
                    ByVal MP2 As System.Nullable(Of Double),  _
                    ByVal MP3 As System.Nullable(Of Double),  _
                    ByVal MP4 As System.Nullable(Of Double),  _
                    ByVal MP5 As System.Nullable(Of Double),  _
                    ByVal MP6 As System.Nullable(Of Double),  _
                    ByVal MP7 As System.Nullable(Of Double),  _
                    ByVal MP8 As System.Nullable(Of Double),  _
                    ByVal MP9 As System.Nullable(Of Double),  _
                    ByVal MP10 As System.Nullable(Of Double),  _
                    ByVal MP11 As System.Nullable(Of Double),  _
                    ByVal MP12 As System.Nullable(Of Double),  _
                    ByVal DiscID As String,  _
                    ByVal Runout1 As String,  _
                    ByVal Runout2 As String,  _
                    ByVal PadInOutSide As String,  _
                    ByVal clockside As String,  _
                    ByVal Weigh As System.Nullable(Of Double),  _
                    ByVal MeasureID As System.Nullable(Of Integer),  _
                    ByVal WeighID As System.Nullable(Of Integer),  _
                    ByVal Datetime As String,  _
                    ByVal finish As String,  _
                    ByVal _Operator As String) As Integer
            If (TemplateName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TemplateName,String)
            End If
            If (Testnumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Testnumber,String)
            End If
            If (Measuretimepoint Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Measuretimepoint,String)
            End If
            If (PadDisc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PadDisc,String)
            End If
            If (MP1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MP1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (MP2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MP2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (MP3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MP3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (MP4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MP4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (MP5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MP5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (MP6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MP6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (MP7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MP7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (MP8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MP8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (MP9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MP9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (MP10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MP10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (MP11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MP11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (MP12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MP12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (DiscID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DiscID,String)
            End If
            If (Runout1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Runout1,String)
            End If
            If (Runout2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Runout2,String)
            End If
            If (PadInOutSide Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PadInOutSide,String)
            End If
            If (clockside Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(clockside,String)
            End If
            If (Weigh.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Weigh.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (MeasureID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MeasureID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (WeighID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(WeighID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            End If
            If (Datetime Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Datetime,String)
            End If
            If (finish Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(finish,String)
            End If
            If (_Operator Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Operator,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VorlagenFormatTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VorlagenFormat"
            tableMapping.ColumnMappings.Add("Templatename", "Templatename")
            tableMapping.ColumnMappings.Add("Measurement Pads Points", "Measurement Pads Points")
            tableMapping.ColumnMappings.Add("Measurement Disc Points", "Measurement Disc Points")
            tableMapping.ColumnMappings.Add("Measurement Pads Times", "Measurement Pads Times")
            tableMapping.ColumnMappings.Add("Measurement Disc Times", "Measurement Disc Times")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `VorlagenFormat` WHERE ((`Templatename` = ?) AND ((? = 1 AND `Measure"& _ 
                "ment Pads Points` IS NULL) OR (`Measurement Pads Points` = ?)) AND ((? = 1 AND `"& _ 
                "Measurement Disc Points` IS NULL) OR (`Measurement Disc Points` = ?)) AND ((? = "& _ 
                "1 AND `Measurement Pads Times` IS NULL) OR (`Measurement Pads Times` = ?)) AND ("& _ 
                "(? = 1 AND `Measurement Disc Times` IS NULL) OR (`Measurement Disc Times` = ?)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Templatename", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Templatename", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `VorlagenFormat` (`Templatename`, `Measurement Pads Points`, `Measure"& _ 
                "ment Disc Points`, `Measurement Pads Times`, `Measurement Disc Times`) VALUES (?"& _ 
                ", ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Templatename", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Templatename", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `VorlagenFormat` SET `Templatename` = ?, `Measurement Pads Points` = ?, `M"& _ 
                "easurement Disc Points` = ?, `Measurement Pads Times` = ?, `Measurement Disc Tim"& _ 
                "es` = ? WHERE ((`Templatename` = ?) AND ((? = 1 AND `Measurement Pads Points` IS"& _ 
                " NULL) OR (`Measurement Pads Points` = ?)) AND ((? = 1 AND `Measurement Disc Poi"& _ 
                "nts` IS NULL) OR (`Measurement Disc Points` = ?)) AND ((? = 1 AND `Measurement P"& _ 
                "ads Times` IS NULL) OR (`Measurement Pads Times` = ?)) AND ((? = 1 AND `Measurem"& _ 
                "ent Disc Times` IS NULL) OR (`Measurement Disc Times` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Templatename", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Templatename", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Templatename", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Templatename", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Pads_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Points", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Disc_Points", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Points", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Pads_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Pads Times", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Measurement_Disc_Times", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Measurement Disc Times", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.MeasureAndWeigh.My.MySettings.Default.MessungenConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Templatename, [Measurement Pads Points], [Measurement Disc Points], [Measu"& _ 
                "rement Pads Times], [Measurement Disc Times] FROM VorlagenFormat"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MessungenDataSet.VorlagenFormatDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MessungenDataSet.VorlagenFormatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MessungenDataSet.VorlagenFormatDataTable = New MessungenDataSet.VorlagenFormatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MessungenDataSet.VorlagenFormatDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MessungenDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VorlagenFormat")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Templatename As String, ByVal Original_Measurement_Pads_Points As System.Nullable(Of Integer), ByVal Original_Measurement_Disc_Points As System.Nullable(Of Integer), ByVal Original_Measurement_Pads_Times As System.Nullable(Of Integer), ByVal Original_Measurement_Disc_Times As System.Nullable(Of Integer)) As Integer
            If (Original_Templatename Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Templatename,String)
            End If
            If (Original_Measurement_Pads_Points.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Measurement_Pads_Points.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Disc_Points.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Measurement_Disc_Points.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Pads_Times.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Measurement_Pads_Times.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Disc_Times.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Measurement_Disc_Times.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Templatename As String, ByVal Measurement_Pads_Points As System.Nullable(Of Integer), ByVal Measurement_Disc_Points As System.Nullable(Of Integer), ByVal Measurement_Pads_Times As System.Nullable(Of Integer), ByVal Measurement_Disc_Times As System.Nullable(Of Integer)) As Integer
            If (Templatename Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Templatename,String)
            End If
            If (Measurement_Pads_Points.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Measurement_Pads_Points.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Measurement_Disc_Points.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Measurement_Disc_Points.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Measurement_Pads_Times.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Measurement_Pads_Times.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Measurement_Disc_Times.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Measurement_Disc_Times.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Templatename As String, ByVal Measurement_Pads_Points As System.Nullable(Of Integer), ByVal Measurement_Disc_Points As System.Nullable(Of Integer), ByVal Measurement_Pads_Times As System.Nullable(Of Integer), ByVal Measurement_Disc_Times As System.Nullable(Of Integer), ByVal Original_Templatename As String, ByVal Original_Measurement_Pads_Points As System.Nullable(Of Integer), ByVal Original_Measurement_Disc_Points As System.Nullable(Of Integer), ByVal Original_Measurement_Pads_Times As System.Nullable(Of Integer), ByVal Original_Measurement_Disc_Times As System.Nullable(Of Integer)) As Integer
            If (Templatename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Templatename,String)
            End If
            If (Measurement_Pads_Points.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Measurement_Pads_Points.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Measurement_Disc_Points.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Measurement_Disc_Points.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Measurement_Pads_Times.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Measurement_Pads_Times.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Measurement_Disc_Times.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Measurement_Disc_Times.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_Templatename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Templatename,String)
            End If
            If (Original_Measurement_Pads_Points.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Measurement_Pads_Points.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Disc_Points.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Measurement_Disc_Points.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Pads_Times.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Measurement_Pads_Times.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_Measurement_Disc_Times.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Measurement_Disc_Times.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DuplTemplateNameTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DuplTemplateName"
            tableMapping.ColumnMappings.Add("Testnumber Feld", "Testnumber Feld")
            tableMapping.ColumnMappings.Add("AnzahlVonDuplikaten", "AnzahlVonDuplikaten")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.MeasureAndWeigh.My.MySettings.Default.MessungenConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Testnumber Feld], AnzahlVonDuplikaten FROM DuplTemplateName"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MessungenDataSet.DuplTemplateNameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MessungenDataSet.DuplTemplateNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MessungenDataSet.DuplTemplateNameDataTable = New MessungenDataSet.DuplTemplateNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DuplTestNumbersAndTimesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DuplTestNumbersAndTimes"
            tableMapping.ColumnMappings.Add("TestnumberFeld", "TestnumberFeld")
            tableMapping.ColumnMappings.Add("AnzahlVonDuplikaten", "AnzahlVonDuplikaten")
            tableMapping.ColumnMappings.Add("Measuretimepoint", "Measuretimepoint")
            tableMapping.ColumnMappings.Add("PadInOutSide", "PadInOutSide")
            tableMapping.ColumnMappings.Add("TemplateName", "TemplateName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.MeasureAndWeigh.My.MySettings.Default.MessungenConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TestnumberFeld, AnzahlVonDuplikaten, Measuretimepoint, PadInOutSide, Templ"& _ 
                "ateName FROM DuplTestNumbersAndTimes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MessungenDataSet.DuplTestNumbersAndTimesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MessungenDataSet.DuplTestNumbersAndTimesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MessungenDataSet.DuplTestNumbersAndTimesDataTable = New MessungenDataSet.DuplTestNumbersAndTimesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
